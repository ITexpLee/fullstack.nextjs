{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(delayedIncrement),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(delayedDecrement);\n\nimport { put } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport { countIncrement, countDecrement } from '../reducers/counter';\nes6promise.polyfill();\nexport function delayedIncrement(amount) {\n  return _regeneratorRuntime.wrap(function delayedIncrement$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // We are using the saga to pass the countIncremenent payload back to itself\n          // This is only to show that the Sagas are functioning.\n          put(countIncrement(amount));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function delayedDecrement(amount) {\n  return _regeneratorRuntime.wrap(function delayedDecrement$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // We are using the saga to pass the countDecrement payload back to itself\n          // This is only to show that the Sagas are functioning.\n          put(countDecrement(amount));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}